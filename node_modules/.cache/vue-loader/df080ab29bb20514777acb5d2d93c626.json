{"remainingRequest":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\kawalcorona_vue_material\\src\\views\\Landing.vue?vue&type=template&id=a8baa566&scoped=true&","dependencies":[{"path":"D:\\kawalcorona_vue_material\\src\\views\\Landing.vue","mtime":1576247545000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\kawalcorona_vue_material\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\kawalcorona_vue_material\\src\\views\\components\\BasicElementsSection.vue?vue&type=template&id=573a91af&scoped=true&","dependencies":[{"path":"D:\\kawalcorona_vue_material\\src\\views\\components\\BasicElementsSection.vue","mtime":1576247545000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\kawalcorona_vue_material\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}